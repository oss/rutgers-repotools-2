#!/usr/bin/python

from optparse import OptionParser
import logging
import os
from repoutils import repoclosure

MASHD="/etc/mash"
TGTD="/mnt/koji/mash"

def main(options, args):
    if options.verbose:
        logging.basicConfig(format="[%(levelname)s] %(message)s", 
                           level=logging.DEUG)
        logging.debug("Showing verbose output")
    else:
        logging.basicConfig(format="[%(levelname)s] %(message)s",
                        level=logging.INFO) 

    repo = args[0]

    if not options.directory and not repo_exists(repo):
        logging.critical("Repo does not exist: {}".format(repo))
    else:
        if options.directory:
            path = repo
        else:
            path = get_repo_path(repo)
       
        errors = depcheck_directory(path)
        if errors:
            logging.error("Dependency issues found:")
            for e in errors:
                logging.error(e)
        else:
            logging.info("No dependency issues found")


def repo_exists(repo):
    """Returns true if a mash file for the repo exists"""
    file = repo + ".mash"
    return os.path.exists(os.path.join(MASHD, file))

def get_repo_path(repo):
    """Returns the path of the given repo"""
    return os.path.join(TGTD, repo)

def depcheck_directory(path):
    """Returns a list of dependency error messages if the repo at the given 
    directory is not clean"""
    rc_config = generate_config(path)
    rc = repoclosure.RepoClosure(config=rc_config)
    os.remove(rc_config)

def generate_config(path):
    """Returns the path to a temp file of the yum config for RepoClosure
    for the given path. The file must be deleted once done with it"""
    (file, path) = tempfile.mkstemp()
    contents = """[main]
debuglevel=2
logfile=/var/log/yum.log
pkgpolicy=newest
distroverpkg=centos-release
reposdir=/dev/null
cachedir=/var/tmp/yum
keepcache=0

[base]
name=CentOS - Base
baseurl=file:///army/centos/centos/6/os/x86_64/

[update]
name=CentOS - Updates
baseurl=file:///army/centos/centos/6/updates/x86_64/

#[addons]
#name=CentOS - Addons
#baseurl=file:///army/centos/centos/6/addons/x86_64/

[extras]
name=CentOS - Extras
baseurl=file:///army/centos/centos/6/extras/x86_64/

[rutgers]
name=CentOS rutgers Tree
baseurl=file:///army/rpmprivate/centos/rutgers/rutgers/6/x86_64/
"""
    file.write(contents)
    file.close()
    return path

if __name__ == "__main__":
    parser = OptionParser(usage="usage: %prog [options] argument")
    
    parser.add_option("--nomail", default=True,
                      action="store_false", dest="send_mail",
                      help="do not send email notifications")
    parser.add_option("-v", "--verbose", default=False,
                      action="store_true", dest="verbose",
                      help="show verbose output")
    parser.add_option("-q", "--quiet", default=True,
                      action="store_false", dest="show_output",
                      help="don't show output (will show errors)")
    parser.add_option("-d", "--directory", default=False,
                      action="store_true", dest="directory",
                      help="argument is a directory, not the name of a repo")

    (options, args) = parser.parse_args()

    if len(args) == 0:
        print "Missing required argument"
    else:
        main(options, args)
